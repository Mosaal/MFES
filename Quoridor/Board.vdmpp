class Board
	types
		public Matrix = seq of seq of Space;

	instance variables
		private board: Matrix := [];
	
	operations
		-- Constructor
		public Board: () ==> Board
		Board() == (
			for all r in set { 1, ..., 9 } do (
				dcl temp : seq of Space := [];
				for all c in set { 1, ..., 9 } do (
					temp := temp ^ [ new Space(0, r, c) ];
				);
				board := board ^ [ temp ];
			);
			
			return self
		);
		
		public Board: Matrix ==> Board
		Board(b) == (
			for all r in set { 1, ..., 9 } do (
				dcl temp : seq of Space := [];
				for all c in set { 1, ..., 9 } do (
					dcl s: Space := new Space(0, r, c);

					s.setValue(b(r)(c).getValue());
					s.setCorner(b(r)(c).getCorner());
					
					s.setPathUp(b(r)(c).getPathUp());
					s.setPathDown(b(r)(c).getPathDown());
					s.setPathLeft(b(r)(c).getPathLeft());
					s.setPathRight(b(r)(c).getPathRight());
					
					temp := temp ^ [ s ];
				);
				board := board ^ [ temp ];
			);
			
			return self
		);
		
		public Board: Board ==> Board
		Board(b) == (
			board := new Board(b.getBoard()).getBoard();
			return self
		);
		
		-- Getters
		public getBoard: () ==> Matrix
		getBoard() == return board
		post RESULT = board;
		
		-- Setters
		public setValue: int * int * int ==> ()
		setValue(v, r, c) == board(r)(c).setValue(v)
		pre v in set { 0, 1, 2 }
		and r in set { 1, ..., 9 }
		and c in set { 1, ..., 9 };
		
		-- Logic functions
		public movePiece: int * int * Player ==> bool
		movePiece(r, c, pl) == (
			dcl ret: bool := false;
		
			if r = pl.getRow() then
				if c = pl.getCol() then
					return ret;
			
			if board(r)(c).getValue() = 0 then (
				if r = pl.getRow() then (
					if c < pl.getCol() then (
						if board(pl.getRow())(pl.getCol()).getPathLeft() = false
							then ret := true
					) else (
						if board(pl.getRow())(pl.getCol()).getPathRight() = false
							then ret := true
					)
				);
				
				if c = pl.getCol() then (
					if r < pl.getRow() then (
						if board(pl.getRow())(pl.getCol()).getPathUp() = false
							then ret := true
					) else (
						if board(pl.getRow())(pl.getCol()).getPathDown() = false
							then ret := true
					)
				)
			);
			
			if ret = true then
				board(pl.getRow())(pl.getCol()).setValue(0);
				
			return ret
		)
		pre r in set { 1, ..., 9 }
		and c in set { 1, ..., 9 };
		
		public placeWall: int * int * int ==> bool
		placeWall(r, c, dir) == (		
			-- UP = 1;
			-- DOWN = 2;
			-- LEFT = 3;
			-- RIGHT = 4;
			
			-- Se estiver nos limites do tabuleiro, algumas direcções são inválidas
			if r = 1 and dir = Space`UP then
				return false;
			if r = 9 and dir = Space`DOWN then
				return false;
			if c = 1 and dir = Space`LEFT then
				return false;
			if c = 9 and dir = Space`RIGHT then
				return false;
			
			-- Ver se os caminhos adjacentes estão vazios
			if dir = Space`UP or dir = Space`DOWN then (
				if board(r)(c).getPathRight() = true then
					return false;
			) else (
				if board(r)(c).getPathDown() = true then
					return false;
			);
			
			-- Ver se os caminhos em largura estão vazios
			if dir = Space`UP then 
				if board(r - 1)(c).getPathRight() = true then
					return false;
			if dir = Space`DOWN then 
				if board(r + 1)(c).getPathRight() = true then
					return false;
			if dir = Space`LEFT then 
				if board(r)(c - 1).getPathDown() = true then
					return false;
			if dir = Space`RIGHT then 
				if board(r)(c + 1).getPathDown() = true then
					return false;
						
						
			-- Verificar que a nova parede não atravessa transversalmente outra parede
			if dir = Space`UP then
				if board(r - 1)(c).getCorner() = true then 
					return false;
			if dir = Space`DOWN or dir = Space`RIGHT then 
				if board(r)(c).getCorner() = true then 
					return false;
			if dir = Space`LEFT then
				if board(r)(c - 1).getCorner() = true then 
					return false;
					
					
			-- Todos os caminhos estão livres, pode-se acrescentar uma parede
			if dir = Space`UP then (
				board(r)(c).setPathRight(true);				board(r)(c + 1).setPathLeft(true);
				board(r - 1)(c).setPathRight(true);		board(r - 1)(c + 1).setPathLeft(true);
				board(r - 1)(c).setCorner(true);
				return true;
			);
			if dir = Space`DOWN then (
				board(r)(c).setPathRight(true);				board(r)(c + 1).setPathLeft(true);
				board(r + 1)(c).setPathRight(true);		board(r + 1)(c + 1).setPathLeft(true);
				board(r)(c).setCorner(true);
				return true;
			);
			if dir = Space`LEFT then (
				board(r)(c).setPathDown(true);			board(r + 1)(c).setPathUp(true);
				board(r)(c - 1).setPathDown(true);	board(r + 1)(c - 1).setPathUp(true);
				board(r)(c - 1).setCorner(true);
				return true;
			);
			if dir = Space`RIGHT then (
				board(r)(c).setPathDown(true);			board(r + 1)(c).setPathUp(true);
				board(r)(c + 1).setPathDown(true);	board(r + 1)(c + 1).setPathUp(true);
				board(r)(c).setCorner(true);
				return true;
			);

			return false;
		)
		pre r in set { 1, ..., 9 }
		and c in set { 1, ..., 9 }
		and dir in set { 1, 2, 3, 4 };
end Board