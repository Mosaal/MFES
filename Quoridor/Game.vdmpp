class Game
	instance variables
		private turn: int;
		private board: Board;
		private player1: Player;
		private player2: Player;

	operations
		-- Constructor
		public Game: () ==> Game
		Game() == (
			turn := 1;
			board := new Board();
			player2 := new Player(1, 1, 5);
			player1 := new Player(2, 9, 5);
			
			return self
		);
		
		-- Getters
		public getBoard: () ==> Board
		getBoard() == return board
		post RESULT = board;
		
		public getPlayer1: () ==> Player
		getPlayer1() == return player1
		post RESULT = player1;
		
		public getPlayer2: () ==> Player
		getPlayer2() == return player2
		post RESULT = player2;
	
		public getTurn: () ==> int
		getTurn() == return turn
		post RESULT = turn;
	
	
		-- Logic functions
		public movePiece: int * int ==> bool
		movePiece(r, c) == (
			dcl ret: bool := false;
		
			if turn = 1 then (
				if board.movePiece(r, c, player1) = true then (
					ret := true;
					player1.setRow(r);
					player1.setCol(c);
					board.setValue(player1.getValue(), r, c)
				)
			);
			
			if turn = 2 then (
				if board.movePiece(r, c, player2) = true then (
					ret := true;
					player2.setRow(r);
					player2.setCol(c);
					board.setValue(player2.getValue(), r, c)
				)
			);
			
			return ret
		)
		pre r in set { 1, ..., 9 }
		and c in set { 1, ..., 9 };
		
		public placeWall: int * int * int ==> bool
		placeWall(r, c, dir) == (
			-- UP = 1;
			-- DOWN = 2;
			-- LEFT = 3;
			-- RIGHT = 4;
			dcl ret: bool := false;
			
			if turn = 1 then (
				if player1.getNumWalls() > 0 then (
					if board.placeWall(r, c, dir) = true then (
						ret := true;
						player1.decNumWalls()
					)
				)
			);
			
			if turn = 2 then (
				if player2.getNumWalls() > 0 then (
					if board.placeWall(r, c, dir) = true then (
						ret := true;
						player2.decNumWalls()
					)
				)
			);
			
			return ret
		)
		pre r in set { 1, ..., 9 }
		and c in set { 1, ..., 9 }
		and dir in set { 1, 2, 3, 4 };
		
		public checkWinner: () ==> int
		checkWinner() == (
			dcl ret: int := 0;
		
			if player1.getRow() = 9 then ret := player1.getValue();
			if player2.getRow() = 1 then ret := player2.getValue();
			
			return ret
		);
		
		public switchTurn: () ==> ()
		switchTurn() == (
			if turn = player1.getValue() then
				turn := player2.getValue()
			else
				turn := player1.getValue();
		);
		
		-- operação que retorna os os espaços adjacentes ao atual para onde é possível se deslocar
		public getNewPossibleSpaces: Board * Space ==> seq of Space
		getNewPossibleSpaces(b, s) == ( -- "s" é o espaço atual
			dcl newpos: seq of Space := [];
			dcl currentrow: int := s.getRow();
			dcl currentcol: int := s.getCol();
			
			-- as linhas seguintes verificam se é possível se deslocar para os espaços adjacentes ao atual, se sim guarda esse espaço em newpos
			if b.getBoard()(currentrow)(currentcol).getPathUp() = false then newpos := newpos ^ [board.getBoard()(currentrow - 1)(currentcol)];
			if b.getBoard()(currentrow)(currentcol).getPathDown() = false then newpos := newpos ^ [board.getBoard()(currentrow + 1)(currentcol)];
			if b.getBoard()(currentrow)(currentcol).getPathLeft() = false then newpos := newpos ^ [board.getBoard()(currentrow)(currentcol - 1)];
			if b.getBoard()(currentrow)(currentcol).getPathRight() = false then newpos := newpos ^ [board.getBoard()(currentrow)(currentcol + 1)];
			
			return newpos
		);
		
		-- operação que verifica se existe um caminho possível para chegar ao lado pretendido do tabuleiro
		public checkPath: Board * int * Space ==> bool
		checkPath (b, er, s) == ( -- "s" é o espaço atual e "er" é a linha que indica o fim do path
			dcl currentrow: int;
			dcl visited: set of Space := {}; -- guarda os espaços já visitados pelo algoritmo ou já postos no pathBoard
			dcl pathBoard: seq of Space := []; -- guarda os espaços que faltam verificar pelo algoritmo
			dcl possiblePaths: seq of Space;
			
			visited := visited union {s};
			pathBoard := pathBoard ^ [s];
			
			while len pathBoard > 0 do (
				possiblePaths := getNewPossibleSpaces(b, pathBoard(1)); -- sequência com os espeços adjancentes para onde é possível ir
				currentrow := pathBoard(1).getRow();
				pathBoard := tl pathBoard; -- elimina o primeiro elemento do pathBoard
				
				if currentrow = er then return true; -- se a linha atual fôr a linha igual à do fim do path, existe path possível
				
				for all i in set { 1, ..., len possiblePaths } do (  
					if possiblePaths(i) not in set visited then ( -- se o novo espaço ainda não foi verificado pelo algoritmo, ele é adicionado 
						visited := visited union {possiblePaths(i)};
						pathBoard := pathBoard ^ [possiblePaths(i)]
					)
				)
			);
			
			return false
		)
		pre er in set { 1, 9 };
end Game